package main

import "fmt"

var Packet = []byte{
	0x08, 0x00, // type and subtype
	0x28, 0x3B, // checksum
	0x2C, 0xCC, // identifier
	0x00, 0x01, // sequence
	0x4F, 0x93, 0x65, 0x5E,
	0x00, 0x00, 0x00, 0x00,
	0x25, 0x33, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
	0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23,
	0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D,
	0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
}

func Checksum(data []byte) []uint16 {
	if len(data)%2 != 0 {
		fmt.Println("WARNING: data is not a multiple of 2, padding with 0s.")
		data = append(data, 0x00)
	}

	//oldCheck := data[2:4]
	// Zero out previous checksum
	//data[2] = 0x00
	//data[3] = 0x00

	// Get the 16-bit 1's complement
	sixteen := make([]uint16, len(data)/2)
	for i := 0; i < len(data); i += 2 {
		temp := (uint16(data[i]) << 8) + uint16(data[i+1])
		sixteen[i/2] = temp
	}
	return sixteen
}
